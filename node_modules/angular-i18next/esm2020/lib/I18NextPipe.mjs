import { Inject, Injectable, Pipe } from '@angular/core';
import { I18NEXT_NAMESPACE, I18NEXT_SCOPE, I18NEXT_SERVICE, } from './I18NEXT_TOKENS';
import * as i0 from "@angular/core";
export class I18NextPipe {
    constructor(translateI18Next, ns, scope) {
        this.translateI18Next = translateI18Next;
        this.ns = ns;
        this.scope = scope;
    }
    transform(key, options) {
        options = this.prepareOptions(options);
        let i18nOpts = this.translateI18Next.options;
        if (options.prependScope === undefined || options.prependScope === true) {
            if (this.scope) {
                key = this.prependScope(key, this.scope, i18nOpts.keySeparator, i18nOpts.nsSeparator);
            }
        }
        if (options.prependNamespace === undefined ||
            options.prependNamespace === true) {
            if (this.ns) {
                key = this.prependNamespace(key, this.ns, i18nOpts.nsSeparator);
            }
        }
        let result = this.translateI18Next.t(key, options);
        if (options.format) {
            if (result) {
                result = this.translateI18Next.format(result, options.format, this.translateI18Next.language);
            }
        }
        return result;
    }
    prependScope(key, scope, keySeparator, nsSeparator) {
        const nsSep = nsSeparator || '';
        const keySep = keySeparator || '';
        if (typeof key === 'string') {
            key = [key];
        }
        if (typeof scope === 'string') {
            scope = [scope];
        }
        let keysWithScope = [];
        for (let i = 0; i < key.length; i++) {
            const k = key[i];
            if (!this.keyContainsNsSeparator(k, nsSep)) {
                // Do not set scope, if key contains a namespace
                keysWithScope.push(...scope.map((sc) => this.joinStrings(keySep, sc, k)));
            }
            keysWithScope.push(k);
        }
        return keysWithScope;
    }
    prependNamespace(key, ns, nsSeparator) {
        const nsSep = nsSeparator || '';
        if (typeof key === 'string') {
            key = [key];
        }
        if (typeof ns === 'string') {
            ns = [ns];
        }
        let keysWithNamespace = [];
        for (let i = 0; i < key.length; i++) {
            const k = key[i];
            if (!this.keyContainsNsSeparator(k, nsSep)) {
                // Do not set namespace, if key contains a namespace
                keysWithNamespace.push(...ns.map((n) => this.joinStrings(nsSep, n, k)));
            }
            keysWithNamespace.push(k);
        }
        return keysWithNamespace;
    }
    joinStrings(separator, ...str) {
        return [...str].join(separator);
    }
    keyContainsNsSeparator(key, nsSeparator) {
        return key.indexOf(nsSeparator) !== -1;
    }
    prepareOptions(options) {
        options = options || {};
        if (options.context != null)
            options.context = options.context.toString();
        return options;
    }
}
I18NextPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.10", ngImport: i0, type: I18NextPipe, deps: [{ token: I18NEXT_SERVICE }, { token: I18NEXT_NAMESPACE }, { token: I18NEXT_SCOPE }], target: i0.ɵɵFactoryTarget.Pipe });
I18NextPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "14.2.10", ngImport: i0, type: I18NextPipe, name: "i18next" });
I18NextPipe.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.10", ngImport: i0, type: I18NextPipe });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.10", ngImport: i0, type: I18NextPipe, decorators: [{
            type: Injectable
        }, {
            type: Pipe,
            args: [{
                    name: 'i18next',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [I18NEXT_SERVICE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [I18NEXT_NAMESPACE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [I18NEXT_SCOPE]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,