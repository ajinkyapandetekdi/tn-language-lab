import { Injectable } from '@angular/core';
import { mapTo, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./storage-map.service";
export class LocalStorage {
    /* Use the `StorageMap` service to avoid code duplication */
    constructor(storageMap) {
        this.storageMap = storageMap;
    }
    /**
     * Number of items in storage wrapped in an `Observable`
     *
     * @example
     * this.localStorage.length.subscribe((length) => {
     *   console.log(length);
     * });
     */
    get length() {
        return this.storageMap.size;
    }
    getItem(key, schema) {
        if (schema) {
            /* Backward compatibility with version <= 7 */
            schema = ('schema' in schema) ? schema.schema : schema;
        }
        return (schema ? this.storageMap.get(key, schema) : this.storageMap.get(key)).pipe(
        /* Transform `undefined` into `null` to align with `localStorage` API */
        map((value) => (value !== undefined) ? value : null));
    }
    /**
     * Set an item in storage.
     * Note that setting `null` or `undefined` will remove the item to avoid some browsers issues.
     * @param key The item's key
     * @param data The item's value
     * @param schema Optional JSON schema to validate the data
     * @returns A RxJS `Observable` to wait the end of the operation
     *
     * @example
     * this.localStorage.set('key', 'value').subscribe(() => {});
     */
    setItem(key, data, schema) {
        return this.storageMap.set(key, data, schema).pipe(
        /* Transform `undefined` into `true` for backward compatibility with v7 */
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        mapTo(true));
    }
    /**
     * Delete an item in storage
     * @param key The item's key
     * @returns A RxJS `Observable` to wait the end of the operation
     *
     * @example
     * this.localStorage.delete('key').subscribe(() => {});
     */
    removeItem(key) {
        return this.storageMap.delete(key).pipe(
        /* Transform `undefined` into `true` for backward compatibility with v7 */
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        mapTo(true));
    }
    /**
     * Delete all items in storage
     * @returns A RxJS `Observable` to wait the end of the operation
     *
     * @example
     * this.localStorage.clear().subscribe(() => {});
     */
    clear() {
        return this.storageMap.clear().pipe(
        /* Transform `undefined` into `true` for backward compatibility with v7 */
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        mapTo(true));
    }
}
LocalStorage.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: LocalStorage, deps: [{ token: i1.StorageMap }], target: i0.ɵɵFactoryTarget.Injectable });
LocalStorage.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: LocalStorage, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: LocalStorage, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.StorageMap }]; } });
//# sourceMappingURL=data:application/json;base64,