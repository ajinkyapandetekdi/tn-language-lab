import { CsResponseInterceptor } from './cs-response-interceptor';
import { CsRequestInterceptor } from './cs-request-interceptor';
export declare enum CsHttpSerializer {
    JSON = "json",
    URLENCODED = "urlencoded",
    UTF8 = "utf8",
    RAW = "raw"
}
export declare enum CsHttpRequestType {
    GET = "GET",
    POST = "POST",
    PATCH = "PATCH",
    DELETE = "DELETE",
    PUT = "PUT"
}
export interface CsSerializedRequest {
    type: CsHttpRequestType;
    host: string | undefined;
    path: string;
    serializer: CsHttpSerializer;
    withBearerToken: boolean;
    withUserToken: boolean;
    headers: {
        [key: string]: string;
    };
    body: {
        [key: string]: string;
    } | string;
    parameters: {
        [key: string]: string;
    };
}
export declare class CsRequest {
    static fromJSON(json: Partial<CsSerializedRequest>): CsRequest;
    static Builder: any;
    private _host?;
    private _serializer;
    private _responseInterceptors;
    private _withBearerToken;
    private _path;
    private _type;
    serializer: CsHttpSerializer;
    withBearerToken: boolean;
    private _headers?;
    private _body?;
    private _parameters?;
    body: {};
    protected constructor();
    private _withUserToken;
    path: string;
    type: CsHttpRequestType;
    responseInterceptors: Array<CsResponseInterceptor>;
    headers: {
        [p: string]: string;
    };
    parameters: {
        [key: string]: string;
    };
    withUserToken: boolean;
    private _requestInterceptors;
    readonly requestInterceptors: CsRequestInterceptor[];
    readonly host: string | undefined;
    toJSON(): string;
}
