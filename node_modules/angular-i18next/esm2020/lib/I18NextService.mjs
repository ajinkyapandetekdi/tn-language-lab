import { Inject, Injectable, Optional } from '@angular/core';
import * as i18n from 'i18next';
import { I18NEXT_ERROR_HANDLING_STRATEGY, I18NEXT_INSTANCE } from './I18NEXT_TOKENS';
import { I18NextEvents } from './I18NextEvents';
import * as i0 from "@angular/core";
const i18nextGlobal = i18n.default;
export class I18NextService {
    constructor(errorHandlingStrategy, i18nextInstance) {
        this.errorHandlingStrategy = errorHandlingStrategy;
        this.events = new I18NextEvents();
        this.i18next = i18nextInstance ?? i18nextGlobal;
    }
    get language() {
        return this.i18next.language;
    }
    get languages() {
        return this.i18next.languages;
    }
    get options() {
        return this.i18next.options;
    }
    get modules() {
        return this.i18next.modules;
    }
    get services() {
        return this.i18next.services;
    }
    get store() {
        return this.i18next.store;
    }
    get resolvedLanguage() {
        return this.i18next.resolvedLanguage;
    }
    get isInitialized() {
        return this.i18next.isInitialized;
    }
    use(module) {
        this.i18next.use.call(this.i18next, module);
        return this;
    }
    init(options) {
        this.subscribeEvents();
        return new Promise((resolve, reject) => {
            this.i18next.init.call(this.i18next, Object.assign({}, options ?? {}), this.errorHandlingStrategy.handle(resolve, reject));
        });
    }
    t(key, optionsOrDefault, options) {
        const hasDefault = optionsOrDefault && typeof optionsOrDefault === 'string';
        if (hasDefault) {
            return this.i18next.t.call(this.i18next, key, optionsOrDefault, options);
        }
        else {
            return this.i18next.t.call(this.i18next, key, optionsOrDefault, undefined);
        }
    }
    format(value, format, lng) {
        return this.i18next.format.call(this.i18next, value, format, lng, {});
    }
    exists(key, options) {
        return this.i18next.exists.call(this.i18next, key, options);
    }
    getFixedT(lng, ns, keyPrefix) {
        return this.i18next.getFixedT.call(this.i18next, lng, ns, keyPrefix);
    }
    setDefaultNamespace(ns) {
        this.i18next.setDefaultNamespace.call(this.i18next, ns);
    }
    dir(lng) {
        return this.i18next.dir.call(this.i18next, lng);
    }
    changeLanguage(lng) {
        return new Promise((resolve, reject) => {
            return this.i18next.changeLanguage.call(this.i18next, lng, this.errorHandlingStrategy.handle(resolve, reject));
        });
    }
    loadNamespaces(namespaces) {
        return new Promise((resolve, reject) => {
            this.i18next.loadNamespaces.call(this.i18next, namespaces, this.errorHandlingStrategy.handle(resolve, reject));
        });
    }
    loadLanguages(lngs) {
        return new Promise((resolve, reject) => {
            this.i18next.loadLanguages.call(this.i18next, lngs, this.errorHandlingStrategy.handle(resolve, reject));
        });
    }
    //#region resource handling
    loadResources(callback) {
        this.i18next.loadResources.call(this.i18next, callback);
    }
    getDataByLanguage(lng) {
        return this.i18next.getDataByLanguage.call(this.i18next, lng);
    }
    async reloadResources(...params) {
        await this.i18next.reloadResources.apply(this.i18next, params);
    }
    getResource(lng, ns, key, options) {
        return this.i18next.getResource.call(this.i18next, lng, ns, key, options);
    }
    addResource(lng, ns, key, value, options) {
        return this.i18next.addResource.call(this.i18next, lng, ns, key, value, options);
    }
    addResources(lng, ns, resources) {
        return this.i18next.addResources.call(this.i18next, lng, ns, resources);
    }
    addResourceBundle(lng, ns, resources, deep, overwrite) {
        return this.i18next.addResourceBundle.call(this.i18next, lng, ns, resources, deep, overwrite);
    }
    hasResourceBundle(lng, ns) {
        return this.i18next.hasResourceBundle.call(this.i18next, lng, ns);
    }
    getResourceBundle(lng, ns) {
        return this.i18next.getResourceBundle.call(this.i18next, lng, ns);
    }
    removeResourceBundle(lng, ns) {
        return this.i18next.removeResourceBundle.call(this.i18next, lng, ns);
    }
    //#endregion
    subscribeEvents() {
        this.i18next.on.call(this.i18next, 'initialized', (options) => {
            this.events.initialized.next(options);
        });
        this.i18next.on.call(this.i18next, 'loaded', (loaded) => this.events.loaded.next(loaded));
        this.i18next.on.call(this.i18next, 'failedLoading', (lng, ns, msg) => this.events.failedLoading.next({ lng, ns, msg }));
        this.i18next.on.call(this.i18next, 'languageChanged', (lng) => {
            this.events.languageChanged.next(lng);
        });
        this.i18next.on.call(this.i18next, 'missingKey', (lngs, namespace, key, res) => this.events.missingKey.next({ lngs, namespace, key, res }));
        this.i18next.on.call(this.i18next, 'added', (lng, ns) => this.events.added.next({ lng, ns }));
        this.i18next.on.call(this.i18next, 'removed', (lng, ns) => this.events.removed.next({ lng, ns }));
    }
}
I18NextService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.10", ngImport: i0, type: I18NextService, deps: [{ token: I18NEXT_ERROR_HANDLING_STRATEGY }, { token: I18NEXT_INSTANCE, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
I18NextService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.10", ngImport: i0, type: I18NextService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.10", ngImport: i0, type: I18NextService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [I18NEXT_ERROR_HANDLING_STRATEGY]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [I18NEXT_INSTANCE]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,