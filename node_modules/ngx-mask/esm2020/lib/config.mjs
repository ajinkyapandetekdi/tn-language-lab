import { InjectionToken } from '@angular/core';
export const config = new InjectionToken('config');
export const NEW_CONFIG = new InjectionToken('NEW_CONFIG');
export const INITIAL_CONFIG = new InjectionToken('INITIAL_CONFIG');
export const initialConfig = {
    suffix: '',
    prefix: '',
    thousandSeparator: ' ',
    decimalMarker: '.',
    clearIfNotMatch: false,
    showTemplate: false,
    showMaskTyped: false,
    placeHolderCharacter: '_',
    dropSpecialCharacters: true,
    hiddenInput: undefined,
    shownMaskExpression: '',
    separatorLimit: '',
    allowNegativeNumbers: false,
    validation: true,
    // eslint-disable-next-line @typescript-eslint/quotes
    specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '"', "'"],
    leadZeroDateTime: false,
    patterns: {
        '0': {
            pattern: new RegExp('\\d'),
        },
        '9': {
            pattern: new RegExp('\\d'),
            optional: true,
        },
        X: {
            pattern: new RegExp('\\d'),
            symbol: '*',
        },
        A: {
            pattern: new RegExp('[a-zA-Z0-9]'),
        },
        S: {
            pattern: new RegExp('[a-zA-Z]'),
        },
        d: {
            pattern: new RegExp('\\d'),
        },
        m: {
            pattern: new RegExp('\\d'),
        },
        M: {
            pattern: new RegExp('\\d'),
        },
        H: {
            pattern: new RegExp('\\d'),
        },
        h: {
            pattern: new RegExp('\\d'),
        },
        s: {
            pattern: new RegExp('\\d'),
        },
    },
};
export const timeMasks = ['Hh:m0:s0', 'Hh:m0', 'm0:s0'];
export const withoutValidation = [
    'percent',
    'Hh',
    's0',
    'm0',
    'separator',
    'd0/M0/0000',
    'd0/M0',
    'd0',
    'M0',
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LW1hc2stbGliL3NyYy9saWIvY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUE2Qi9DLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBNEIsSUFBSSxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDNUUsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUE0QixJQUFJLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUNwRixNQUFNLENBQUMsTUFBTSxjQUFjLEdBQTRCLElBQUksY0FBYyxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFFNUYsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFZO0lBQ3JDLE1BQU0sRUFBRSxFQUFFO0lBQ1YsTUFBTSxFQUFFLEVBQUU7SUFDVixpQkFBaUIsRUFBRSxHQUFHO0lBQ3RCLGFBQWEsRUFBRSxHQUFHO0lBQ2xCLGVBQWUsRUFBRSxLQUFLO0lBQ3RCLFlBQVksRUFBRSxLQUFLO0lBQ25CLGFBQWEsRUFBRSxLQUFLO0lBQ3BCLG9CQUFvQixFQUFFLEdBQUc7SUFDekIscUJBQXFCLEVBQUUsSUFBSTtJQUMzQixXQUFXLEVBQUUsU0FBUztJQUN0QixtQkFBbUIsRUFBRSxFQUFFO0lBQ3ZCLGNBQWMsRUFBRSxFQUFFO0lBQ2xCLG9CQUFvQixFQUFFLEtBQUs7SUFDM0IsVUFBVSxFQUFFLElBQUk7SUFDaEIscURBQXFEO0lBQ3JELGlCQUFpQixFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQztJQUN6RixnQkFBZ0IsRUFBRSxLQUFLO0lBQ3ZCLFFBQVEsRUFBRTtRQUNULEdBQUcsRUFBRTtZQUNKLE9BQU8sRUFBRSxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUM7U0FDMUI7UUFDRCxHQUFHLEVBQUU7WUFDSixPQUFPLEVBQUUsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDO1lBQzFCLFFBQVEsRUFBRSxJQUFJO1NBQ2Q7UUFDRCxDQUFDLEVBQUU7WUFDRixPQUFPLEVBQUUsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDO1lBQzFCLE1BQU0sRUFBRSxHQUFHO1NBQ1g7UUFDRCxDQUFDLEVBQUU7WUFDRixPQUFPLEVBQUUsSUFBSSxNQUFNLENBQUMsYUFBYSxDQUFDO1NBQ2xDO1FBQ0QsQ0FBQyxFQUFFO1lBQ0YsT0FBTyxFQUFFLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQztTQUMvQjtRQUNELENBQUMsRUFBRTtZQUNGLE9BQU8sRUFBRSxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUM7U0FDMUI7UUFDRCxDQUFDLEVBQUU7WUFDRixPQUFPLEVBQUUsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDO1NBQzFCO1FBQ0QsQ0FBQyxFQUFFO1lBQ0YsT0FBTyxFQUFFLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQztTQUMxQjtRQUNELENBQUMsRUFBRTtZQUNGLE9BQU8sRUFBRSxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUM7U0FDMUI7UUFDRCxDQUFDLEVBQUU7WUFDRixPQUFPLEVBQUUsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDO1NBQzFCO1FBQ0QsQ0FBQyxFQUFFO1lBQ0YsT0FBTyxFQUFFLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQztTQUMxQjtLQUNEO0NBQ0QsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBYSxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFFbEUsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQWE7SUFDMUMsU0FBUztJQUNULElBQUk7SUFDSixJQUFJO0lBQ0osSUFBSTtJQUNKLFdBQVc7SUFDWCxZQUFZO0lBQ1osT0FBTztJQUNQLElBQUk7SUFDSixJQUFJO0NBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNvbmZpZyB7XG5cdHN1ZmZpeDogc3RyaW5nO1xuXHRwcmVmaXg6IHN0cmluZztcblx0dGhvdXNhbmRTZXBhcmF0b3I6IHN0cmluZztcblx0ZGVjaW1hbE1hcmtlcjogJy4nIHwgJywnO1xuXHRjbGVhcklmTm90TWF0Y2g6IGJvb2xlYW47XG5cdHNob3dUZW1wbGF0ZTogYm9vbGVhbjtcblx0c2hvd01hc2tUeXBlZDogYm9vbGVhbjtcblx0cGxhY2VIb2xkZXJDaGFyYWN0ZXI6IHN0cmluZztcblx0c2hvd25NYXNrRXhwcmVzc2lvbjogc3RyaW5nO1xuXHRkcm9wU3BlY2lhbENoYXJhY3RlcnM6IGJvb2xlYW4gfCBzdHJpbmdbXTtcblx0c3BlY2lhbENoYXJhY3RlcnM6IHN0cmluZ1tdO1xuXHRoaWRkZW5JbnB1dDogYm9vbGVhbiB8IHVuZGVmaW5lZDtcblx0dmFsaWRhdGlvbjogYm9vbGVhbjtcblx0c2VwYXJhdG9yTGltaXQ6IHN0cmluZztcblx0YWxsb3dOZWdhdGl2ZU51bWJlcnM6IGJvb2xlYW47XG5cdGxlYWRaZXJvRGF0ZVRpbWU6IGJvb2xlYW47XG5cdHBhdHRlcm5zOiB7XG5cdFx0W2NoYXJhY3Rlcjogc3RyaW5nXToge1xuXHRcdFx0cGF0dGVybjogUmVnRXhwO1xuXHRcdFx0b3B0aW9uYWw/OiBib29sZWFuO1xuXHRcdFx0c3ltYm9sPzogc3RyaW5nO1xuXHRcdH07XG5cdH07XG59XG5cbmV4cG9ydCB0eXBlIG9wdGlvbnNDb25maWcgPSBQYXJ0aWFsPElDb25maWc+O1xuZXhwb3J0IGNvbnN0IGNvbmZpZzogSW5qZWN0aW9uVG9rZW48SUNvbmZpZz4gPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ2NvbmZpZycpO1xuZXhwb3J0IGNvbnN0IE5FV19DT05GSUc6IEluamVjdGlvblRva2VuPElDb25maWc+ID0gbmV3IEluamVjdGlvblRva2VuKCdORVdfQ09ORklHJyk7XG5leHBvcnQgY29uc3QgSU5JVElBTF9DT05GSUc6IEluamVjdGlvblRva2VuPElDb25maWc+ID0gbmV3IEluamVjdGlvblRva2VuKCdJTklUSUFMX0NPTkZJRycpO1xuXG5leHBvcnQgY29uc3QgaW5pdGlhbENvbmZpZzogSUNvbmZpZyA9IHtcblx0c3VmZml4OiAnJyxcblx0cHJlZml4OiAnJyxcblx0dGhvdXNhbmRTZXBhcmF0b3I6ICcgJyxcblx0ZGVjaW1hbE1hcmtlcjogJy4nLFxuXHRjbGVhcklmTm90TWF0Y2g6IGZhbHNlLFxuXHRzaG93VGVtcGxhdGU6IGZhbHNlLFxuXHRzaG93TWFza1R5cGVkOiBmYWxzZSxcblx0cGxhY2VIb2xkZXJDaGFyYWN0ZXI6ICdfJyxcblx0ZHJvcFNwZWNpYWxDaGFyYWN0ZXJzOiB0cnVlLFxuXHRoaWRkZW5JbnB1dDogdW5kZWZpbmVkLFxuXHRzaG93bk1hc2tFeHByZXNzaW9uOiAnJyxcblx0c2VwYXJhdG9yTGltaXQ6ICcnLFxuXHRhbGxvd05lZ2F0aXZlTnVtYmVyczogZmFsc2UsXG5cdHZhbGlkYXRpb246IHRydWUsXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcXVvdGVzXG5cdHNwZWNpYWxDaGFyYWN0ZXJzOiBbJy0nLCAnLycsICcoJywgJyknLCAnLicsICc6JywgJyAnLCAnKycsICcsJywgJ0AnLCAnWycsICddJywgJ1wiJywgXCInXCJdLFxuXHRsZWFkWmVyb0RhdGVUaW1lOiBmYWxzZSxcblx0cGF0dGVybnM6IHtcblx0XHQnMCc6IHtcblx0XHRcdHBhdHRlcm46IG5ldyBSZWdFeHAoJ1xcXFxkJyksXG5cdFx0fSxcblx0XHQnOSc6IHtcblx0XHRcdHBhdHRlcm46IG5ldyBSZWdFeHAoJ1xcXFxkJyksXG5cdFx0XHRvcHRpb25hbDogdHJ1ZSxcblx0XHR9LFxuXHRcdFg6IHtcblx0XHRcdHBhdHRlcm46IG5ldyBSZWdFeHAoJ1xcXFxkJyksXG5cdFx0XHRzeW1ib2w6ICcqJyxcblx0XHR9LFxuXHRcdEE6IHtcblx0XHRcdHBhdHRlcm46IG5ldyBSZWdFeHAoJ1thLXpBLVowLTldJyksXG5cdFx0fSxcblx0XHRTOiB7XG5cdFx0XHRwYXR0ZXJuOiBuZXcgUmVnRXhwKCdbYS16QS1aXScpLFxuXHRcdH0sXG5cdFx0ZDoge1xuXHRcdFx0cGF0dGVybjogbmV3IFJlZ0V4cCgnXFxcXGQnKSxcblx0XHR9LFxuXHRcdG06IHtcblx0XHRcdHBhdHRlcm46IG5ldyBSZWdFeHAoJ1xcXFxkJyksXG5cdFx0fSxcblx0XHRNOiB7XG5cdFx0XHRwYXR0ZXJuOiBuZXcgUmVnRXhwKCdcXFxcZCcpLFxuXHRcdH0sXG5cdFx0SDoge1xuXHRcdFx0cGF0dGVybjogbmV3IFJlZ0V4cCgnXFxcXGQnKSxcblx0XHR9LFxuXHRcdGg6IHtcblx0XHRcdHBhdHRlcm46IG5ldyBSZWdFeHAoJ1xcXFxkJyksXG5cdFx0fSxcblx0XHRzOiB7XG5cdFx0XHRwYXR0ZXJuOiBuZXcgUmVnRXhwKCdcXFxcZCcpLFxuXHRcdH0sXG5cdH0sXG59O1xuXG5leHBvcnQgY29uc3QgdGltZU1hc2tzOiBzdHJpbmdbXSA9IFsnSGg6bTA6czAnLCAnSGg6bTAnLCAnbTA6czAnXTtcblxuZXhwb3J0IGNvbnN0IHdpdGhvdXRWYWxpZGF0aW9uOiBzdHJpbmdbXSA9IFtcblx0J3BlcmNlbnQnLFxuXHQnSGgnLFxuXHQnczAnLFxuXHQnbTAnLFxuXHQnc2VwYXJhdG9yJyxcblx0J2QwL00wLzAwMDAnLFxuXHQnZDAvTTAnLFxuXHQnZDAnLFxuXHQnTTAnLFxuXTtcbiJdfQ==